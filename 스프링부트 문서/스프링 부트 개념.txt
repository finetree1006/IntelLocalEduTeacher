스프링 부트 개념.txt



*디펜던시? 의존성 주입?

하나의 객체에서 다른 객체를 사용하는 상태를 의존한다고 한다

*스프링(Spring)
EJB를 주 프레임워크로 사용할 때 불편했던 점들을 해소(스트럿츠)

*스프링 프레임워크란?
Java 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크

-애플리케이션 프레임워크
특정 계층이나 기술, 업무 분야에 국한되지 않고 애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크를 말함

-경량급 프레임워크
단순한 웹 컨테이너에서도 엔터프라이즈 개발의 고급 기술을 대부분 사용할 수 있음

-엔터프라이즈 개발 용이
개발자가 복잡하고 실수하기 쉬운 Low Level에 많이 신경 쓰지 않으면서 Business Logic 개발에 
전념할 수 있도록 해줌

-오픈소스
Spring은 OpenSource의 장점을 충분히 취하면서 동시에 OpenSource 제품의 단점과 한계를 잘 극복함

*Spring Framework 특징
1.컨테이너 역할
Spring 컨테이너는 Java 객체의 Life Cycle을 관리하며, Spring 컨테이너로부터 필요한 객체를 가져와 사용할 수 있다

2.DI(Dependency Injection) 지원
스프링은 설정 파일이나 어노테이션을 통해서 객체 간의 의존관계를 설정할 수 있도록 하고 있다

3.AOP(Aspect Oriented Programming) 지원
스프링은 트랜잭션이나 로깅, 보안과 같이 공통적으로 필요로 하는 모듈들을 실제 핵심 모듈에서 
분리해서 적용할 수 있다

4.POJO(Plain Old Java Object) 지원
스프링 컨테이너에 저장되는 Java 객체는 특정한 인터페이스를 구현하거나, 특정 클래스를 상속받지 않아도 된다

5.트랜잭션 처리를 위한 일관된 방법을 지원
JDBC, JPA 등 어떤 트랜잭션을 사용하던 설정을 통해 정보를 관리하므로 트랜잭션 구현에 상관없이 
동일한 코드 사용 가능

6.영속성(Persistence)과 관련된 다양한 API 지원
Spring은 MyBatis, Hibernate 등 데이터베이스 처리를 위한 
ORM(Object Relational Mapping) 프레임워크들과의 연동을 지원한다

*스프링을 사용하기 위해 Maven Build가 필요함

*Maven
자바 개발의 사실상 표준 빌드 툴
- 이전에는 ANT를 많이 사용
XML 설정파일을 사용
groovy라는 언어로 설정을 하는 gradle이 등장

*Convention
스프링 구조에서 컨벤션이란? 일반적으로 개발자들이 따르는 일련의 규칙, 패턴, 또는 관습을 의미한다
스프링 프레임워크에서는 이러한 컨벤션들이 개발을 효율적으로 하고 코드의 일관성을 유지하는데 중요한 역할을 한다
-이름 규칙 ex: 클래스, 메서드, 변수명 등의 명명규칙
-디렉토리 구조 ex: controller, service, repository 등의 패키지
-빈 설정과 관리등

컨벤션의 중요성
일관된 코드 스타일은 코드를 더 쉽게 이해하고 유지보수 할 수 있게 해준다
개발자들이 공통된 패턴을 다루게 되면, 팀 간 협업이 쉬워지고 개발 속도가 빨라진다
표준화를 통해 학습 곡선이 완만해지고 새로운 기술이나 프레임워크를 도입할 때의 어려움이 줄어든다

개발을 돕는 일종의 가이드라인의 역할

즉 스프링은 위의 개념을 도입하고 있다

*의존성 관리를 자동으로 수행
Maven 중앙 저장소(Central Repository)를 제공하여 자바 라이브러리에 대한 생태계를 조성

*Pom.xml 메이븐의 메인 설정 파일
프로젝트 루트에 위치
메이븐 프로젝트를 의미, IDE에서 불러오기가 쉬움

*메이븐 프로젝트 설정 시 필수사항
-프로젝트명
arifact ID로 사용

-그룹 아이디
주로 프로젝트 생성 조직이나 기관의 도메인 명 역순으로 표기
ex) kr.co.company
Top-level package명으로 사용됨

-버전
개발버전을 의미하는 SNAPSHOT 버전 사용
배포버전의 경우 Release 

*Maven 설치
로컬에 설치 필요
IDE에 포함된 경우에는 별도 설치 필요 없음


*IoC(Inversion of Control)
IoC란? 제어의 역전, 객체의 생성, 생명주기의 관리까지
모든 객체에 대한 제어권이 바뀌었다는 것을 의미한다
컴포넌트 의존관계 결정 설정 및 생명주기를 해결하기 위한 디자인 패턴

*Ioc 컨테이너
스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음
즉, IoC 컨테이너 기능을 제공한다
IoC컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다
POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다
개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡긴다

스프링에서는 이를 Spring Container라고 부른다

*DI(Dependency Injection) 의존성 주입
각 클래스 간의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것

스프링 컨테이너에 의해서 관리되는 객체
스프링 빈이라고도 함
스프링 설정파일에 등록되어 사용 ... 자동 등록 기능 사용 가능

*Spring Container
관리되어지는 빈이 모여 있는 곳
IoC 컨테이너로써 Application Context 클래스로 구현됨

스프링은 스프링 컨테이너에 빈(자바객체)을 로딩하여 관리한다
빈을 자동으로 관리해 주는 기능은 스프링의 핵심 기능 중 하나이다

*DI의 개념
각 클래스간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 
연결해주는 것을 말함

-개발자들은 단지 빈 설정파일에서 의존관계가 필요하다는 정보를 추가하면 됨(어노테이션)
-객체 레퍼런스를 컨테이너로부터 주입 받아서, 실행 시에 동적으로 의존관계가 생성됨
-컨테이너가 흐름의 주체가 되어 애플리케이션 코드에 의존관계를 주입해주는 것

DI의 장점: 코드가 단순해진다, 컴포넌트 간의 결합도가 제거된다

DI의 유형
-setter 메서드를 이용한 의존성 삽입
-생성자를 이용한 의존성 삽입
-일반 메서드를 이용한 의존성 삽입

*Application Context
-Bean을 등록, 생성, 조회, 반환 관리하는 기능
-Spring의 각종 부가 서비스를 추가로 제공함
-Spring이 제공하는 Application Context 구현 클래스가 여러 가지 종류가 있음

*Layerd Architecture 특징
계층화 아키텍처
효율적인 개발과 유지보수를 위해 계층화하여 개발
대부분의 중/대규모 어플리케이션에서 적용
각 레이어는 독립된 R&R을 가짐

*프레젠테이션 영역
사용자와 상호작용을 담당
사용자의 요청을 분석/응답

*비즈니스 영역
기능을 수행
트랜잭션 수행

*데이터 영역
데이터의 저장과 조회를 담당
주로 데이터베이스와 연동하여 작업

*MVC 패턴
Layered Architecture를 사용한 대표적 패턴
Model, View, Controller로 구분
UI를 가지는 대부분의 어플리케이션은 MVC 혹은 변형된 MVC 패턴을 사용 -> SpringMVC

기능을 포함한 비즈니스 레이어와 데이터 접근 역할을 하는 DAO 레이어
그리고 사용자 인터랙션의 역할을 수행하는 프레젠테이션 레이어로 구분한다.

*@Autowired
Component 간의 의존관계는 Autowired라는 Annotation으로 적용

*MVC 패턴의 개념
모델-뷰-컨트롤러는 소프트웨어 공학에서 사용되는 아키텍처 패턴으로
MVC 패턴의 주 목적은 Business Logic과 Presentation Logic을 분리하기 위함이다

MVC 패턴을 사용하면, 사용자 인터페이스로부터 비지니스 로직을 분리하여 
애플리케이션의 시각적 요소나 그 이면에서 실행되는 비지니스 로직을 서로 영향 없이
쉽게 고칠 수 있는 애플리케이션을 만들 수 있음
Model: 애플리케이션의 정보(데이터, 비즈니스 로직 포함)
View: 사용자에게 제공할 화면(프레젠테이션 로직)
Controller: Model과 View 사이의 상호작용을 관리

*Model 컴포넌트
데이터 저장소와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다루는 일을 함
여러 개의 데이터 변경 작업, 추가, 삭제를 하나의 작업으로 묶는 트랜잭션을 다루는 일을 함
DAO 클래스, Service 클래스에 해당

*Controller 컴포넌트
클라이언트의 요청을 받았을 때 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출하는 일을 함
클라이언트가 보낸 데이터가 있다면, 모델을 호출할 때 전달하기 쉽게 데이터를 적절히 가공하는 일을 함
모델이 업무 수행을 완료하면, 그 결과를 가지고 화면을 생성하도록 뷰에게 전달
(클라이언트 요청에 대해 모델과 뷰를 결정하여 전달)
Servlet과 JSP를 사용하여 작성할 수 있음

*Spring MVC의 특징
-Spring은 DI나 AOP 같은 기능뿐만 아니라,
서블릿 기반의 웹 개발을 위한 MVC 프레임워크를 제공
-Spring MVC는 모델2 아키텍처와 Front Controller 패턴을 프레임워크 차원에서 제공
-Spring MVC 프레임워크는 Spring을 기반으로 하고 있기 때문에 Spring이 제공하는 
트랜잭션 처리나 DI 및 AOP등을 손쉽게 사용가능 하다

*SpringMVC의 주요 구성 요소
DispatcherServlet: 클라이언트의 요청을 받아서 Controller에게 클라이언트의 요청을 전달하고,
리턴한 결과값을 VIew에게 전달하여 알맞은 응답을 생성
HandlerMapping: URL과 요청 정보를 기준으로 어떤 핸들러 객체를 사용할지 결정하는 객체이며,
DispatcherServlet은 하나 이상의 핸들러 매핑을 가질 수 있음
ModelAndView: Controller가 처리한 데이터 및 화면에 대한 정보를 보유한 객체
ViewResolver: Controller가 리턴한 뷰 이름을 기반으로 Controller 처리 결과를 
생성할 뷰를 결정


*Controller
사용자 요청(URL 기반)에 해당하는 Controller의 특정 메소드가 호출됨
Controller는 요청의 파라미터가 있으면 처리하고
비즈니스 처리를 위해서 서비스 컴포넌트를 주입 받아서 실행
실행된 결과를 전달받아 화면 정보와 함께 DispatcherServlet에게 반환

일반적으로 사용되는 Annotation
Controller
RequestMapping
Autowired



*OpenApI(Application Programming Interface)
open Api는 말 그대로 개방형 API이다
API가 응용 프로그램을 개발할 때 사용하는 인터페이스라는 의미이므로,
open API는 프로그래밍에서 사용할 수 있는 개방되어 있는 상태의 인터페이스를 말한다

Daum, Naver 등의 포털 사이트나 통계청, 기상청 등과 같은 관공서에도 가지고 있는
데이터를 외부 응용 프로그램에서 사용할 수 있도록 open api를 제공하고 있다
open api와 함께 자주 거론되는 기술이 rest이며,
대부분 open api는 rest 방식으로 지원되고 있다

**REST(Representational State Transfer)ful API
HTTP URI + HTTP Method
HTTP URI를 통해 제어할 자원을 명시하고,
HTTP Method(GET, POST, PUT, DELETE)를 통해 해당 자원(RESOURCE)을
제어하는 명령을 내리는 방식의 아키텍처

HTTP 프로토콜에 정의된 4개의 메서드들이 자원에 대한 CRUD Operation을 정의
*요청 방식 선택
http method				CRUD
GET					read(select)
POST				create(insert)
PUT					update or create
DELETE				delete



*컨트롤러에서 클라이언트의 요청을 처리한 후에 다른 페이지로 리다이렉트 하고 싶을 때
redirect:/경로
경로 부분이 "/"로 시작하면 웹 어플리케이션 내에서 절대 경로로 사용된다
"/"로 시작하지 않으면 어노테이션의 경로를 기준으로 상대 경로로 사용된다

요청을 처리한 후에 다른 페이지로 포워드 하고 싶을 때
forward:/경로
위와 동일


*Mybatis
자바 오브젝트와 SQL문 사이의 자동 Mapping 기능을 지원하는 Object Mapper이다
Mybatis는 SQL을 별도의 파일로 분리해서 관리하게 해주며,
객체-SQL 사이의 파라미터 Mapping 작업을 자동으로 해주기 때문에 많은 인기를
얻고 있는 기술이다

Mybatis는 Hibernate나 JPA(Java Persistence Api)처럼 새로운 
DB프로그래밍 패러다임을 익혀야 하는 부담이 없이,
개발자가 익숙한 SQL을 그대로 이용하면서 JDBC 코드 작성의 불편함도 제거해주고
도메인 객체나 VO객체를 중심으로 개발이 가능하다는 장점이 있다

*Mybatis 특징
쉬운 접근성과 코드의 간결함
-가장 간단한 퍼시스턴스 프레임워크
-xml형태로 서술된 jdbc 코드라고 생각해도 될 만큼
jdbc의 모든 기능을 mybatis가 대부분 제공함
-복잡한 jdbc 코드를 걷어내며 깔끔한 소스코드를 유지할 수 있음
-수동적인 파라미터 설정과 쿼리 결과에 대한 맵핑 구문을 제거할 수 있음
SQL문과 프로그래밍 코드의 분리
-SQL에 변경이 있을 때마다 자바 코드를 수정하거나 컴파일 하지 않아도 됨
-sql작성과 관리 또는 검토를 dba와 같은 개발자가 아닌 다른 사람에게 맡길 수도 있음
다양한 프로그래밍 언어로 구현 가능
-Java, C#, .NET, Ruby등

*마이바티스 주요 컴포넌트
-SqlSession
핵심적인 역할을 하는 클래스로서 sql실행이나 트랜잭션 관리를 실행한다
SqlSession 오브젝트는 Thread-Safe하지 않으므로 thread마다 필요에 따라 생성한다
-mapping파일
SQL문과 ORM(Object Relational Mapping)을 설정한다

*MyBatis 동적 SQL
Dynamic SQL
검색조건에 따라 검색해야 하는 SQL문이 달라지기 때문에
이를 처리하기 위해서 동적 SQL이 사용됨

MyBatis의 표현식
if
trim
choose(when, otherwise)
foreach

*동적 SQL 작성 시 유의사항
mybatis 구문을 이용하여 sql문이 실행 시에 변경되기 때문에
모든 케이스에 대해 테스트가 이루어져야 함
동적 sql문이 없는 상태에서 정상적인 실행을 확인 후,
동적 sql을 추가해서 개발하는 것이 바람직하다

표현식의 경우 jstl의 문법을 거의 따른다


*Fetch API?
fetch() 메소드란?
자바스크립트의 fetch() 메소드는
비동기 통신으로 요청(request)을 발행하고, 해당 응답(response)을 취득하는 함수이다

즉,
비동기 통신이라는 방법으로, 서버상에 있는 원하는 데이터를 취득할 수 있다라는 의미이다

=> 비동기 통신 정보
브라우저와 서버의 통신으로 데이터 취득을 하려면
요청과 응답을 주고받는 것이 발생하는데
통상적으로는 이 작업은 "동기 통신"이라고 하는 것으로 행해진다

예를 들어 web 페이지의 표시나 이동/수정을 하면 화면이 순간 새하얗게 되고나서
표시가 되지만,
이 새하얀 상태에서는 사이트의 조작 등은 불가능하다

이와 같이 요청에 대한 응답을 받을 때 까지 다음 처리를 하지 못하고
기다려야 하는 것이 "동기 통신"이다

"비동기 통신"은 이와 다르게
요청을 발행하고 응답을 받을 때 까지 다른 처리를 할 수 있다

평소 자주 볼 수 있는 비동기 통신의 대표적인 예는
검색의 자동완성기능 혹은 서제스트 기능이다
검색란에 검색하려는 키워드를 입력하면 관련 목록이 폼 아래에 자동으로 표시되는 것이다

이건 1자를 입력할 때 마다 검색후보를 서버에 요청하고, 그 응답을 페이지에 반영하고 있는데
응답을 하는 와중에도 문자를 입력하거나 다른 처리를 할 수 있다는 것이다

비동기 통신은 동기 통신과 같은 대기시간이 없으며 계속해서 다른 처리를 할 수 있다는 점에서
사용자 편의성 개선으로 이어진다

fetch를 정리하자면
서버로 원하는 데이터 요청을 전송하면 리스폰스를 기다리면서 
다른 처리도 할 수 있다는 것이 핵심이다





*스프링 부트

프레임워크란?
사전적 의미는 뼈대 혹은 틀을 의미

소프트웨어 관점
-애플리케이션의 골격에 해당하는 아키텍처를 제공
-프레임워크 기반의 애플리케이션을 개발하면
개발자는 비즈니스 로직에 집중할 수 있음

*오픈 소스 프레임워크
레이어별 가장 많이 사용하는 자바 기반 프레임워크
스프링의 IoC와 AOP 모듈을 이용하여
스프링 컨테이너에서 동작하는 비즈니스 컴포넌트를 개발함

JPA: 하이버네이트를 비롯한 모든 ORM(Object Relation Mapping)
프레임워크의 표준이다
MyBatis: XML 파일에 작성한 SQL을 자바 객체와 매핑해주는 
데이터 매퍼 프레임워크

*오픈 소스 프레임워크의 장점
빠른 구현 시간
관리의 용이성 증가
개발자들의 역량 획일화
검증된 아키텍처의 재사용
아키텍처의 일관성 유지

*스프링 부트의 등장
스프링의 복잡도 증가
본래 웹 애플리케이션만을 목적으로 만든 것이 아님
하지만 대부분 웹 애플리케이션 개발 시 스프링을 사용하는 현상 발생

웹 애플리케이션이 복잡해지면서 원래 목적인
비즈니스 로직에 집중하지 못하게 됨
(라이브러리 관리 및 XML 환경 설정)

스프링 부트는 스프링 프레임워크와 달리 웹 애플리케이션을 목적으로 함
스프링 처럼 많은 설정이 필요하지 않음 -> 개발자들이 쉽게 접근 가능

커맨드 도구를 제공하고 톰캣같은 내장 서버를 통해
서버와 관련된 복잡한 설정들을 제거함
->
스프링을 처음 사용하는 개발자도 애플리케이션 관련 설정을 쉽게 처리,
관리함으로써 개발 자체에 집중할 수 있음

*스프링 부트의 특징
-라이브러리 관리 자동화
메이븐을 기반으로 하는 스타터(starter)를 통해 애플리케이션에 필요한
라이브러리 의존성 문제를 해결함

-설정의 자동화
추가된 라이브러리와 환경 설정을 자동으로 처리함
EX: JPA를 사용하기 위해 JPA 스타터 추가 시
스프링 부트가 라이브러리에 포함된 자동설정 클래스를 인지해
JPA 사용에 필요한 객체들을 자동으로 생성

-라이브러리 버전 자동 관리
스프링 프로젝트에서는 스프링 라이브러리 뿐만 아니라
서드파티 라이브러리도 사용, 함께 다운로드

-테스트 환경과 내장 서버
기본적으로 jUnit을 비롯한 테스트 관련 라이브러리들을 포함
다양한 계층의 테스트 케이스를 쉽게 작성 가능
톰캣 같은 웹 서버 내장

-독립적으로 실행 가능한 jar
애플리케이션을 실제 운영 서버에 배포하기 위해서는 패키징(packaging)을 해야 함

웹 애플리케이션 -> WAR(Web Archive) 파일로 패키징
스프링 부트 -> 웹 애플리케이션도 JAR 파일로 패키징 가능(빠른 개발과 빠른 배포)

*스프링 부트 프로젝트 구조 이해
소스 폴더
src/main/java
일반적인 자바 클래스 작성

src/main/resources
자바가 아닌 파일(XML 또는 Properties) 작성

src/test/java
jUnit 기반의 테스트 코드 작성

static 폴더
이미지나 html 같은 정적인 웹 컨턴츠 저장

templates 폴더
타임리프(Thymleaf) 같은 템플릿 기반의 웹 리소스 저장

application.properties 파일
프로젝트 전체에서 사용할 프로퍼티 정보 저장

Maven Dependencies
maven에 의해 프로젝트 Path에 등록된 라이브러리 목록
pom.xml 파일에 디펜던시를 추가하여 라이브러리 관리

라이브러리 다운로드 물리적 위치
c:Users\컴퓨터명\.m2\repository

*스프링 부트 설정(Properties, Yaml) 이해
스프링 부트는 애플리케이션에서 사용하는 설정 정보를
외부 프로퍼티로 분리시킴으로써 자바 소스 수정을 최소화 함

애플리케이션의 환경을 관리하는 설정 파일

*Yaml 파일
야믈이라고도 불림
XML이나 JSON과 마찬가지로 데이터의 의미와
구조를 쉽게 전달하기 위한 파일
기존의 xml이나 json보다 쉽게 작성할 수 있고 
가독성이 뛰어남

properties설정을 yaml 파일로 대체할 수 있음
src/main/resources 소스 폴더에 있는 application.properties 파일 제거 후
yaml파일로 대체할 수 있음 (주의사항: 들여쓰기에 주의해야 함)

*REST 컨트롤러
@RestController를 사용하여 REST 컨트롤러 구현
컨트롤러 클래스는 반드시 main 클래스의 하위 패키지에 위치해야 함

*컨트롤러 빈 등록
@GetMapping은 Get방식의 요청을 처리
리턴한 데이터를 브라우저에 그대로 전달하기 때문에
별도로 View 화면을 만들 필요가 없음

*기존의 웹 접근 방식과 RESTful API 방식과의 차이점
				기존 게시판						rest api를 지원하는 게시판
글목록	get		/bbs/list					get		/bbs
글읽기	get		/bbs/list/{articleId}		get		/bbs/{articleId}
글등록	post	/bbs/list/regist			post	/bbs
글삭제	get		/bbs/remove/{articleId}		delete	/bbs/{articleId}
글수정	post	/bbs/modify/{articleId}		put, patch		/bbs/{articleId}

기존의 게시판은 get, post만으로 crud를 처리하며, URI는 액션을 나타낸다
rest 게시판은 4가지 메서드를 모두 사용하여 CRUD를 처리하며, URI는 제어하려는 자원을 나타낸다

*rest 어노테이션 핵심
@RequestBody : HTTP request body를 java 객체로 전달 받을 수 있다
@ResponseBody: Java 객체를 HTTP Response Body로 전송할 수 있다
자바객체를 XML이나 JSON으로 변환해서 전송할 수 있는 기능을 제공하고 있음

*JSON(JavaScript Object Notation)
web에서 data 교환 방식 - 사실상 표준
json은 경량 data 교환 형식
json 표현식은 사람과 기계 모두 이해하기 쉬우며 용량이 작아서,
최근에는 json이 xml을 대체해서 데이터 전송 등에 많이 사용
특정 언어에 종속되지 않으며, 대부분의 프로그래밍 언어에서 json 포맷의
데이터를 핸들링 할 수 있는 라이브러리를 제공



*Lombok
여러가지 @어노테이션을 제공하고 컴파일 과정에서 
자동으로 개발자가 원하는 메소드를 생성/주입 방식으로 동작하는 라이브러리입니다.

-Lombok 롬복의 기능
Lombok의 기능은 model 클래스나 Entity 같은 도메인 클래스 등에 반복되는 
getter, setter, toString 등의 메소드를 자동으로 만들어주는 기능을 합니다.
-Lombok 롬복의 장점
Lombok은 복잡하고 반복되는 코드를 어노테이션 기반의 코드 자동생성으로 
생산성이 향상되고 코드가 축소되어 가독성 및 유지보수성을 높일 수 있습니다.
-Lombok 롬복의 단점
코드가 직접 눈에 보이는게 아니므로 직관성이 떨어질수 있습니다.

자주 사용되는 Lombok 어노테이션
@NorgsConstructor : 파라미터가 없는 기본 생성자를 만들어줍니다.
@AllArgsConstructor : 모든 필드 값을 파라미터로 받는 생성자를 만들어줍니다.
@RequiredArgsConstructor : final이나 @NonNull 인 필드 값만 파라미터로 받는 생성자를 
만들어줍니다.
@EqualsAndHashCode : equals와 hashcode를 자동으로 생성해주는 어노테이션입니다.
@Data는 위에서 설명한 Getter, Setter, RequiredArgsConstructor, ToString
, EqualsAndHashCode를 한번에 설정해주는 어노테이션으로 실무에서는 
너무 무겁고 객체의 안정성을 지키기 때문에 @Data의 활용을 지양합니다.
@Builder : 자동으로 해당 클래스에 빌더를 추가해줍니다.


*SLF4J와 Logback을 이용한 로그 남기기
Java 진영에는 많은 로깅툴이 존재함
commons-logging
log4j
logback 등등

현재는 SLF4J나 Log4j2 등의 버전들을 사용

*LogBack Logger / Appender 추가
Logback Log의 패턴
%thread 실행 쓰레드명
%msg 로깅 내용
%n 개행 문자
%-5level 로깅 레벨 출력
고정폭 5자리, 로깅 레벨이 info일 경우 빈칸 하나 추가
%d{yyyy-MM-dd HH:mm:ss} 로깅하고 있는 현재 시간, 시분초
%logger 패키지 포함 클래스 정보
%method 로깅하고 있는 클래스의 메소드
%line 로깅하고 있는 클래스 소스의 line

*Logback Log Level
TRACE	GREEN	DEBUG 레벨 보다 좀 더 상세한 메시지 출력
DEBUG	GREEN	디버깅을 위해 출력하는 메시지 출력
INFO	GREEN	상태 변경과 같은 정보 전달 목적의 메시지 출력
WARN	YELLOW	향후에 에러의 원인이 될 수 있는 경고성 메시지 출력
ERROR	RED		요청을 처리하는 과정에 발생한 치명적인 에러 메시지 출력

특정 로그 레벨을 지정하면 상위 로그가 모두 출력됨
개발 단계 -> DEBUG나 TRACE로 설정
운영 단계 -> WARN 이상으로 변경




